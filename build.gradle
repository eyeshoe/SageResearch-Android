/*
 *    Copyright 2017 Sage Bionetworks
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0-rc2'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'

        // begin ResearchStack
        classpath 'me.tatarka:gradle-retrolambda:3.2.3'
        classpath "com.neenbedankt.gradle.plugins:android-apt:1.4"
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'
        //end ResearchStack

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    version = '0.0.5'
    group = 'org.sagebionetworks.researchsuite'

    repositories {
        jcenter()
        mavenLocal()
        maven { url 'https://maven.google.com' }

        maven { url "https://jitpack.io" } // ResearchStack
    }
}

subprojects {
    afterEvaluate { project ->
        if (project.plugins.hasPlugin('com.android.library')) {
            task sourcesJar(type: Jar) {
                from android.sourceSets.main.java.srcDirs
                classifier = 'sources'
            }

            task javadoc(type: Javadoc) {
                source = android.sourceSets.main.java.srcDirs
                classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
                classpath += fileTree(dir: "$buildDir/intermediates/exploded-aar/", include: "**/classes.jar")
                classpath += configurations.compile
                // Exclude generated files
                exclude '**/BuildConfig.java'
                exclude '**/R.java'
            }

            task javadocJar(type: Jar, dependsOn: javadoc) {
                classifier = 'javadoc'
                from javadoc.destinationDir
            }
            artifacts {
                archives javadocJar
                archives sourcesJar
            }

            task findConventions {
                doLast {
                    println project.getConvention()
                }
            }
        }

        if (project.plugins.hasPlugin('java-library')) {
            println project.name

            task sourcesJar(type: Jar) {
                from sourceSets.main.allSource
                classifier = 'sources'
            }
//
//            task javadoc(type: Javadoc) {
//                source = android.sourceSets.main.java.srcDirs
//                classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//                classpath += fileTree(dir: "$buildDir/intermediates/exploded-aar/", include: "**/classes.jar")
//                classpath += configurations.compile
//                // Exclude generated files
//                exclude '**/BuildConfig.java'
//                exclude '**/R.java'
//            }

            task javadocJar(type: Jar, dependsOn: javadoc) {
                classifier = 'javadoc'
                from javadoc.destinationDir
            }
            artifacts {
                archives javadocJar
                archives sourcesJar
            }

            task findConventions {
                doLast {
                    println project.getConvention()
                }
            }
        }
    }

}

task clean(type: Delete) {
    delete rootProject.buildDir
}